#version 430
#extension GL_ARB_compute_variable_group_size: enable

#define M_PI 3.1415926535897932384626433832795

struct Particle
{
    uint index;
    uint bucket;
    float lambda;
    float mass;
    float density;
    float fluid;
    float solid;
    float gas;

    vec3 pos;
    vec3 vel;

    vec3 curl;
    vec3 tempPos;
    vec3 displacement;
};

uniform uint taskId;
uniform float timestep;
uniform uint iterations;
uniform float kernelSupport;
uniform float restDensity;
uniform float artVisc;
uniform float artVort;
uniform float cfmRegularization;
uniform float corrConst;
uniform float corrDist;
uniform float corrExp;
uniform float particleSize;
uniform float aabbMinX;
uniform float aabbMinY;
uniform float aabbMinZ;
uniform float aabbMaxX;
uniform float aabbMaxY;
uniform float aabbMaxZ;

uniform vec3 minOfs;
uniform ivec3 dimSize;
uniform uint nParticles;
uniform uint nBuckets;
uniform uint nBlocks;

layout (std430,binding=0) buffer frontBuffer
{
    Particle particlesFront[];
};

layout (std430,binding=1) buffer backBuffer
{
    Particle particles[];
};

layout (std430,binding=2) buffer histBuffer
{
    uint histogram[];
};

layout (std430,binding=4) buffer sumsBuffer
{
    uint sums[];
};

layout (std430,binding=5) buffer incrBuffer
{
    uint incr[];
};

layout (std430,binding=3) buffer ofsBuffer
{
    uint ofs[];
};

layout( local_size_variable ) in;


void updateDisplacement(uint gId);
void neighborInteraction(uint gId,Particle p);
Particle checkBBoxCollision(Particle p);

float kernelExecute(vec3 r,uint kernelId);
float kernelPoly6(vec3 r);
float kernelSpikey(vec3 r);
float kernelViscocity(vec3 r);

vec3 gradExecute(vec3 r,uint kernelId);
vec3 gradPoly6(vec3 r);
vec3 gradSpikey(vec3 r);
vec3 gradViscocity(vec3 r);

uint beginIdx[9];
uint endIdx[9];

shared uint temp[4*2048];

void main()
{
    uint gId = gl_GlobalInvocationID.x;
    if(gId>=nParticles)
    {
        return;
    }

    float minDist = 100000.0f;
    float density = 0.0;
    vec3  gradSum1 = vec3(0.0,0.0,0.0);
    float gradSum2 = 0.0;
    vec3  curl = vec3(0.0,0.0,0.0);
    vec3  velAccum = vec3(0.0,0.0,0.0);
    float invRestDensity = 1.0/restDensity;

    switch(taskId)
    {
    //Apply external forces
    case 0:
        {
            particlesFront[gId].vel += timestep*vec3(0.0,-9.81,0.0)*particlesFront[gId].fluid;
            particlesFront[gId].tempPos = particlesFront[gId].pos + timestep*particlesFront[gId].vel;
            break;
        }
    //Insert and Count Buckets
    case 1:
        {
            Particle pf = particlesFront[gId];
            vec3 posF = (pf.pos-minOfs)/kernelSupport;
            ivec3 pos = clamp(ivec3(floor(posF)),ivec3(0),dimSize-ivec3(1));
            /*float xPosF = (pf.pos.x-minOfs.x)/kernelSupport;
            float yPosF = (pf.pos.y-minOfs.y)/kernelSupport;
            float zPosF = (pf.pos.z-minOfs.z)/kernelSupport;

            int xPos = clamp(int(floor(xPosF)),0,dimSize.x-1);
            int yPos = clamp(int(floor(yPosF)),0,dimSize.y-1);
            int zPos = clamp(int(floor(zPosF)),0,dimSize.z-1);*/

            uint b = pos.x+(dimSize.x*(pos.y+dimSize.y*pos.z));
            particlesFront[gId].bucket = b;
            atomicAdd(histogram[b],1);
            break;
        }
    //Compute Histogram
    case 2:
        {
            uint lId = gl_LocalInvocationID.x;
            //lId = gId;
            int offset = 1;
            uint ai = lId;
            uint bi = lId + (1024/2);
            uint bankOffsetA = ai/32;
            uint bankOffsetB = bi/32;
            temp[ai+bankOffsetA] = histogram[ai+1024*gl_WorkGroupID.x];
            temp[bi+bankOffsetB] = histogram[bi+1024*gl_WorkGroupID.x];
            for(uint d=1024>>1;d>0;d>>=1)
            {
                memoryBarrier();
                barrier();
                if(lId<d)
                {
                    uint ai = offset*(2*lId+1)-1;
                    uint bi = offset*(2*lId+2)-1;
                    ai += ai/32;
                    bi += bi/32;
                    temp[bi] += temp[ai];
                }
                offset *= 2;
            }
            if(lId==0)
            {
                sums[gl_WorkGroupID.x] = temp[1024-1+((1024-1)/32)];
                temp[1024-1+((1024-1)/32)]=0;
            }
            for(uint d=1;d<1024;d*=2)
            {
                offset>>=1;
                memoryBarrier();
                barrier();
                if(lId<d)
                {
                    uint ai = offset*(2*lId+1)-1;
                    uint bi = offset*(2*lId+2)-1;
                    ai += ai/32;
                    bi += bi/32;
                    uint t = temp[ai];
                    temp[ai] = temp[bi];
                    temp[bi] += t;
                }
            }
            memoryBarrier();
            barrier();
            histogram[ai+(gl_WorkGroupID.x*1024)] = temp[ai+bankOffsetA];
            histogram[bi+(gl_WorkGroupID.x*1024)] = temp[bi+bankOffsetB];
            /*uint acc=0;
            for(uint i=0;i<=nBuckets;i++)
            {
                uint tVal = histogram[i];
                histogram[i] = acc;
                acc+=tVal;
            }*/
            break;
        }
    case 10:
        {
            uint lId = gl_LocalInvocationID.x;
            int offset = 1;
            uint ai = lId;
            uint bi = lId + (1024/2);
            uint bankOffsetA = ai/32;
            uint bankOffsetB = bi/32;
            temp[ai+bankOffsetA] = sums[ai];
            temp[bi+bankOffsetB] = sums[bi];
            for(uint d=1024>>1;d>0;d>>=1)
            {
                memoryBarrier();
                barrier();
                if(lId<d)
                {
                    uint ai = offset*(2*lId+1)-1;
                    uint bi = offset*(2*lId+2)-1;
                    ai += ai/32;
                    bi += bi/32;
                    temp[bi] += temp[ai];
                }
                offset *= 2;
            }
            if(lId==0)
            {
                temp[1024-1+((1024-1)/32)]=0;
            }
            for(uint d=1;d<1024;d*=2)
            {
                offset>>=1;
                memoryBarrier();
                barrier();
                if(lId<d)
                {
                    uint ai = offset*(2*lId+1)-1;
                    uint bi = offset*(2*lId+2)-1;
                    ai += ai/32;
                    bi += bi/32;
                    uint t = temp[ai];
                    temp[ai] = temp[bi];
                    temp[bi] += t;
                }
            }
            memoryBarrier();
            barrier();
            incr[ai] = temp[ai+bankOffsetA];
            incr[bi] = temp[bi+bankOffsetB];
            break;
        }
    case 11:
        {
            uint lId = gl_LocalInvocationID.x;
            uint wId = gl_WorkGroupID.x;
            histogram[lId+((wId)*1024)]+=incr[wId];
            //histogram[lId+(gl_WorkGroupID.x+1)*512]+=incr[gl_WorkGroupID.x];
            break;
        }
    //Reoder Particles
    case 3:
        {
            Particle pf = particlesFront[gId];
            uint b = pf.bucket;
            particles[histogram[b]+atomicAdd(ofs[b],1)] = pf;
            break;
        }
    //Update Lambda
    case 4:
        {
            Particle p = particles[gId];
            neighborInteraction(gId,p);
            for(uint i=0;i<9;i++)
            {
                for(uint j=beginIdx[i];j<endIdx[i];j++)
                {
                    Particle n = particles[j];
                    if(p.index!=n.index)
                    {
                        if(dot(p.tempPos-n.pos,p.tempPos-n.pos)<=kernelSupport*kernelSupport)
                        {
                            density += kernelPoly6(p.tempPos-n.pos)*n.fluid*p.fluid;
                            vec3 grad = gradSpikey(p.tempPos-n.pos)*n.fluid*p.fluid;
                            gradSum1 += grad;
                            grad = (invRestDensity*-grad)*n.fluid*p.fluid;
                            gradSum2 += dot(grad,grad);
                        }
                    }
                }
            }
            density = (invRestDensity*density)-1.0;
            particles[gId].density = density;
            gradSum1 = invRestDensity*gradSum1;
            float gradSum = gradSum2+dot(gradSum1,gradSum1);
            particles[gId].lambda = -max(density/(gradSum+cfmRegularization),0.0);
            break;
        }
    case 5:
        {
            Particle p = particles[gId];
            vec3 displacement = vec3(0.0,0.0,0.0);
            neighborInteraction(gId,p);
            for(uint i=0;i<9;i++)
            {
                for(uint j=beginIdx[i];j<endIdx[i];j++)
                {
                    Particle n = particles[j];
                    if(p.index!=n.index)
                    {
                        if(dot(p.tempPos-n.pos,p.tempPos-n.pos)<=kernelSupport*kernelSupport)
                        {
                            float sCorr = -corrConst*pow(kernelPoly6(p.tempPos-n.pos)/kernelPoly6(vec3(kernelSupport*corrDist,0.0,0.0)),corrExp);
                            displacement += ((p.lambda+n.lambda+sCorr)*gradSpikey(p.tempPos-n.pos))*n.fluid*p.fluid;
                        }
                    }
                }
            }
            particles[gId].displacement = invRestDensity*displacement;
            break;
        }
    case 6:
        {
            Particle p = particles[gId];
            float minDist = 1000000.0f;
            float rSumSquared = 4*particleSize*particleSize;
            vec3 v = (p.tempPos+p.displacement)-p.pos;
            vec3 n1 = normalize(v);
            vec3 tempDispl = p.displacement;



            neighborInteraction(gId,p);

            for(uint i=0;i<9;i++)
            {
                for(uint j=beginIdx[i];j<endIdx[i];j++)
                {
                    Particle n = particles[j];
                    if(p.index!=n.index)
                    {
                        if(dot(p.tempPos-n.pos,p.tempPos-n.pos)<=kernelSupport*kernelSupport)
                        {
                            vec3 c = n.pos-p.pos;
                            float d = dot(n1,c);
                            if(d>0.0)
                            {
                                float f = dot(c,c)-(d*d);
                                if(f<rSumSquared)
                                {
                                    float t = sqrt(rSumSquared-f);
                                    float corr = (d-t);
                                    minDist = min(corr,minDist);
                                    tempDispl = tempDispl+(p.fluid*n.solid*(p.pos+(minDist*n1)-p.tempPos-tempDispl));
                                }
                            }
                        }
                    }
                }
            }
            p.displacement = tempDispl;
            particles[gId] = checkBBoxCollision(p);
            break;
        }
    case 7:
        {
            Particle p = particles[gId];
            particles[gId].tempPos += p.displacement;
            break;
        }
    case 8:
        {
            Particle p = particles[gId];
            p.vel = (1.0/timestep)*(p.tempPos-p.pos);
            //particles[gId] = p;
            particlesFront[gId] = p;
            break;
        }
    case 9:
        {
            Particle pf = particlesFront[gId];
            neighborInteraction(gId,pf);
            for(uint i=0;i<9;i++)
            {
                for(uint j=beginIdx[i];j<endIdx[i];j++)
                {
                    Particle n = particlesFront[j];
                    if(pf.index!=n.index)
                    {
                        if(dot(pf.tempPos-n.pos,pf.tempPos-n.pos)<=kernelSupport*kernelSupport)
                        {
                            curl += cross(n.vel-pf.vel,gradSpikey(pf.tempPos-n.pos))*n.fluid;
                        }
                    }
                }
            }

            if(dot(curl,curl)>0.0)
            {
                vec3 fvort = cfmRegularization*cross(normalize(curl),curl);
                particlesFront[gId].vel += timestep*fvort*particlesFront[gId].fluid;
            }

            for(uint i=0;i<9;i++)
            {
                for(uint j=beginIdx[i];j<endIdx[i];j++)
                {
                    Particle n = particlesFront[j];
                    if(pf.index!=n.index)
                    {
                        if(dot(pf.tempPos-n.pos,pf.tempPos-n.pos)<=kernelSupport*kernelSupport)
                        {
                            velAccum += ((n.vel-pf.vel)*kernelPoly6(pf.tempPos-n.pos))*n.fluid;
                        }
                    }
                }
            }

            particlesFront[gId].vel += artVisc*velAccum*particlesFront[gId].fluid;
            particlesFront[gId].pos  = pf.tempPos;
            break;
        }
    }
    groupMemoryBarrier();
    memoryBarrier();
}

Particle checkBBoxCollision(Particle p)
{
    float d;
    d = -dot(vec3(0.0,1.0,0.0),vec3(0.0,aabbMinY,0.0));
    if(dot((p.tempPos+p.displacement),vec3(0.0,1.0,0.0))+d<0.0)
    {
        vec3 n1 = vec3(0.0,1.0,0.0);
        vec3 r = -n1;
        if(dot((p.pos),vec3(0.0,1.0,0.0))+d>=0.0)
        {
            r = normalize((p.tempPos+p.displacement)-p.pos);
        }
        float t = -(d+dot(n1,p.pos))/max(dot(n1,r),1.0);
        p.displacement = p.displacement*p.solid+(p.pos+(r*t)-p.tempPos)*p.fluid;
    }

    d = -dot(vec3(0.0,-1.0,0.0),vec3(0.0,aabbMaxY,0.0));
    if(dot((p.tempPos+p.displacement),vec3(0.0,-1.0,0.0))+d<0.0)
    {
        vec3 n1 = vec3(0.0,-1.0,0.0);
        vec3 r = -n1;
        if(dot((p.pos),vec3(0.0,-1.0,0.0))+d>=0.0)
        {
            r = normalize((p.tempPos+p.displacement)-p.pos);
        }
        float t = -(d+dot(n1,p.pos))/max(dot(n1,r),1.0);
        p.displacement = p.displacement*p.solid+(p.pos+(r*t)-p.tempPos)*p.fluid;
    }

    d = -dot(vec3(1.0,0.0,0.0),vec3(aabbMinX,0.0,0.0));
    if(dot((p.tempPos+p.displacement),vec3(1.0,0.0,0.0))+d<0.0)
    {
        vec3 n1 = vec3(1.0,0.0,0.0);
        vec3 r = -n1;
        if(dot((p.pos),vec3(1.0,0.0,0.0))+d>=0.0)
        {
            r = normalize((p.tempPos+p.displacement)-p.pos);
        }
        float t = -(d+dot(n1,p.pos))/dot(n1,r);
        p.displacement = p.displacement*p.solid+(p.pos+(r*t)-p.tempPos)*p.fluid;
    }

    d = -dot(vec3(-1.0,0.0,0.0),vec3(aabbMaxX,0.0,0.0));
    if(dot((p.tempPos+p.displacement),vec3(-1.0,0.0,0.0))+d<0.0)
    {
        vec3 n1 = vec3(-1.0,0.0,0.0);
        vec3 r = -n1;
        if(dot((p.pos),vec3(-1.0,0.0,0.0))+d>=0.0)
        {
            r = normalize((p.tempPos+p.displacement)-p.pos);
        }
        float t = -(d+dot(n1,p.pos))/dot(n1,r);
        p.displacement = p.displacement*p.solid+(p.pos+(r*t)-p.tempPos)*p.fluid;
    }

    d = -dot(vec3(0.0,0.0,1.0),vec3(0.0,0.0,aabbMinZ));
    if(dot((p.tempPos+p.displacement),vec3(0.0,0.0,1.0))+d<0.0)
    {
        vec3 n1 = vec3(0.0,0.0,1.0);
        vec3 r = -n1;
        if(dot((p.pos),vec3(0.0,0.0,1.0))+d>=0.0)
        {
            r = normalize((p.tempPos+p.displacement)-p.pos);
        }
        float t = -(d+dot(n1,p.pos))/dot(n1,r);
        p.displacement = p.displacement*p.solid+(p.pos+(r*t)-p.tempPos)*p.fluid;
    }

    d = -dot(vec3(0.0,0.0,-1.0),vec3(0.0,0.0,aabbMaxZ));
    if(dot((p.tempPos+p.displacement),vec3(0.0,0.0,-1.0))+d<0.0)
    {
        vec3 n1 = vec3(0.0,0.0,-1.0);
        vec3 r = -n1;
        if(dot((p.pos),vec3(0.0,0.0,-1.0))+d>=0.0)
        {
            r = normalize((p.tempPos+p.displacement)-p.pos);
        }
        float t = -(d+dot(n1,p.pos))/dot(n1,r);
        p.displacement = p.displacement*p.solid+(p.pos+(r*t)-p.tempPos)*p.fluid;
    }
    return p;
    /*if(dot((p.tempPos+p.displacement),vec3(0.0,1.0,0.0))+1.0f<0.0)
    {
        vec3 n1 = vec3(0.0,1.0,0.0);
        vec3 r = normalize((p.tempPos+p.displacement)-p.pos);
        float t = -(1.0f+dot(n1,-1.0*n1))/dot(n1,r);
        p.displacement = p.pos+(r*t)-p.tempPos;
    }
    if(dot((p.tempPos+p.displacement),vec3(0.0,-1.0,0.0))+1.0f<0.0)
    {
        vec3 n1 = vec3(0.0,-1.0,0.0);
        vec3 r = normalize((p.tempPos+p.displacement)-p.pos);
        float t = -(1.0+dot(n1,-1.0*n1))/dot(n1,r);
        p.displacement = p.pos+(r*t)-p.tempPos;
    }
    if(dot((p.tempPos+p.displacement),vec3(-1.0,0.0,0.0))+1.0f<0.0)
    {
        vec3 n1 = vec3(-1.0,0.0,0.0);
        vec3 r = normalize((p.tempPos+p.displacement)-p.pos);
        float t = -(1.0+dot(n1,-1.0*n1))/dot(n1,r);
        p.displacement = p.pos+(r*t)-p.tempPos;
    }
    if(dot((p.tempPos+p.displacement),vec3(1.0,0.0,0.0))+1.0f<0.0)
    {
        vec3 n1 = vec3(1.0,0.0,0.0);
        vec3 r = normalize((p.tempPos+p.displacement)-p.pos);
        float t = -(1.0+dot(n1,-1.0*n1))/dot(n1,r);
        p.displacement = p.pos+(r*t)-p.tempPos;
    }
    if(dot((p.tempPos+p.displacement),vec3(0.0,0.0,-1.0))+1.0f<0.0)
    {
        vec3 n1 = vec3(0.0,0.0,-1.0);
        vec3 r = normalize((p.tempPos+p.displacement)-p.pos);
        float t = -(1.0+dot(n1,-1.0*n1))/dot(n1,r);
        p.displacement = p.pos+(r*t)-p.tempPos;
    }
    if(dot((p.tempPos+p.displacement),vec3(0.0,0.0,1.0))+1.0f<0.0)
    {
        vec3 n1 = vec3(0.0,0.0,1.0);
        vec3 r = normalize((p.tempPos+p.displacement)-p.pos);
        float t = -(1.0+dot(n1,-1.0*n1))/dot(n1,r);
        p.displacement = p.pos+(r*t)-p.tempPos;
    }*/
    return p;

}

void neighborInteraction(uint gId, Particle p)
{
    vec3 posF = (p.tempPos-minOfs)/kernelSupport;
    ivec3 pos = clamp(ivec3(floor(posF)),ivec3(0),dimSize-ivec3(1));

    int xPosBegin,xPosEnd;
    int yPosBegin,yPosEnd;
    int zPosBegin,zPosEnd;

    ivec3 posBegin = max(pos-ivec3(1),ivec3(0));
    ivec3 posEnd = min(pos+ivec3(1),dimSize-ivec3(1));

    ivec2 posBeginEndX = ivec2(posBegin.x,posEnd.x);

    //Bottom
    ivec2 bottomBack = posBeginEndX+(ivec2(dimSize.x)*(ivec2(posBegin.y)+ivec2(dimSize.y)*ivec2(posBegin.z)));
    beginIdx[0] = histogram[bottomBack.x];
    endIdx[0] = histogram[bottomBack.y+1];

    ivec2 bottomFront = posBeginEndX+(ivec2(dimSize.x)*(ivec2(posBegin.y)+ivec2(dimSize.y)*ivec2(posEnd.z)));
    beginIdx[1] = histogram[bottomFront.x];
    endIdx[1] = histogram[bottomFront.y+1];

    ivec2 bottomCenter = posBeginEndX+(ivec2(dimSize.x)*(ivec2(posBegin.y)+ivec2(dimSize.y)*ivec2(pos.z)));
    beginIdx[2] = histogram[bottomCenter.x];
    endIdx[2] = histogram[bottomCenter.y+1];

    //Top
    ivec2 topBack = posBeginEndX+(ivec2(dimSize.x)*(ivec2(posEnd.y)+ivec2(dimSize.y)*ivec2(posBegin.z)));
    beginIdx[3] = histogram[topBack.x];
    endIdx[3] = histogram[topBack.y+1];

    ivec2 topFront = posBeginEndX+(ivec2(dimSize.x)*(ivec2(posEnd.y)+ivec2(dimSize.y)*ivec2(posEnd.z)));
    beginIdx[4] = histogram[topFront.x];
    endIdx[4] = histogram[topFront.y+1];

    ivec2 topCenter = posBeginEndX+(ivec2(dimSize.x)*(ivec2(posEnd.y)+ivec2(dimSize.y)*ivec2(pos.z)));
    beginIdx[5] = histogram[topCenter.x];
    endIdx[5] = histogram[topCenter.y+1];

    //Center
    ivec2 centerBack = posBeginEndX+(ivec2(dimSize.x)*(ivec2(pos.y)+ivec2(dimSize.y)*ivec2(posBegin.z)));
    beginIdx[6] = histogram[centerBack.x];
    endIdx[6] = histogram[centerBack.y+1];

    ivec2 centerFront = posBeginEndX+(ivec2(dimSize.x)*(ivec2(pos.y)+ivec2(dimSize.y)*ivec2(posEnd.z)));
    beginIdx[7] = histogram[centerFront.x];
    endIdx[7] = histogram[centerFront.y+1];

    ivec2 centerCenter = posBeginEndX+(ivec2(dimSize.x)*(ivec2(pos.y)+ivec2(dimSize.y)*ivec2(pos.z)));
    beginIdx[8] = histogram[centerCenter.x];
    endIdx[8] = histogram[centerCenter.y+1];
}

float checkParticleCollision(uint gId,Particle n,float minDist)
{
    Particle p = particles[gId];
    float ret = minDist;
    vec3 dVec = n.pos-(p.tempPos+p.displacement);
    float rSumSquared = 4*particleSize*particleSize;
    vec3 c = n.pos-p.pos;
    vec3 v = (p.tempPos+p.displacement)-p.pos;
    vec3 n1 = normalize(v);
    float d = dot(n1,c);
    float d1 = d*d-(dot((c),(c)))+particleSize*particleSize;
    if(d1>=0.0)
    {
        float f = dot(c,c)-(d*d);
        float t = sqrt(rSumSquared-f);
        float d = dot(t*v,n1);
        minDist = min(d,minDist);
        float corr = (minDist-t);
        vec3 tempDispl = p.pos+(t*v)-p.tempPos;
        particles[gId].displacement = tempDispl;
    }
    return minDist;
}

float kernelExecute(vec3 r,uint kernelId)
{
    switch(kernelId)
    {
    //Poly6 Kernel
    case 0:
        return kernelPoly6(r);
        break;
    //Spikey Kernel
    case 1:
        return kernelSpikey(r);
        break;
    //Viscocity Kernel
    case 2:
        return kernelViscocity(r);
        break;
    }
    return 0;
}

float kernelPoly6(vec3 r)
{
    if(dot(r,r)==0)
    {
        return 0.0;
    }
    return (315.0/(64*M_PI*pow(kernelSupport,9)))*pow((kernelSupport*kernelSupport-dot(r,r)),3);
}

float kernelSpikey(vec3 r)
{
    if(dot(r,r)==0)
    {
        return 0.0;
    }
    return (15.0/(M_PI*pow(kernelSupport,6)))*pow((kernelSupport-length(r)),3);
}

float kernelViscocity(vec3 r)
{
    if(dot(r,r)==0)
    {
        return 0.0;
    }
    float rl = length(r);
    return -(pow(rl,3)/(2*pow(kernelSupport,3)))+(pow(rl,2)/(pow(kernelSupport,2)))+(kernelSupport/(2*rl));
    //return (45.0/(M_PI*pow(kernelSupport,6)))*(kernelSupport-length(r));
}

vec3 gradExecute(vec3 r,uint kernelId)
{
    switch(kernelId)
    {
    //Poly6 Kernel
    case 0:
        return gradPoly6(r);
        break;
    //Spikey Kernel
    case 1:
        return gradSpikey(r);
        break;
    //Viscocity Kernel
    case 2:
        return gradViscocity(r);
        break;
    }
    return vec3(0.0,0.0,0.0);
}

vec3 gradPoly6(vec3 r)
{
    if(dot(r,r)==0)
    {
        return vec3(0.0,0.0,0.0);
    }
    return vec3(-(945*(r.x)*pow((-pow((r.x),2)+pow((r.y),2)+pow((r.z),2)+kernelSupport*kernelSupport),2))/(32*M_PI*pow(kernelSupport,9)),
                     -(945*(r.y)*pow((-pow((r.x),2)+pow((r.y),2)+pow((r.z),2)+kernelSupport*kernelSupport),2))/(32*M_PI*pow(kernelSupport,9)),
                     -(945*(r.z)*pow((-pow((r.x),2)+pow((r.y),2)+pow((r.z),2)+kernelSupport*kernelSupport),2))/(32*M_PI*pow(kernelSupport,9)));


}

vec3 gradSpikey(vec3 r)
{
    if(dot(r,r)==0)
    {
        return vec3(0.0,0.0,0.0);
    }
    /*if(length(r)==0)
    {
        r = vec3(0.0,1.0,0.0);
    }*/
    return ((-45.0f/(M_PI*(pow(kernelSupport,6))))*(pow((kernelSupport-length(r)),2))*normalize(r));
}


vec3 gradViscocity(vec3 r)
{
    if(dot(r,r)==0)
    {
        return vec3(0.0,0.0,0.0);
    }
    return -(pow(length(r),3)/(2*pow(kernelSupport,3)))-(pow(length(r),2)/(pow(kernelSupport,2)))+(kernelSupport/(2*length(r)))-1;
}
